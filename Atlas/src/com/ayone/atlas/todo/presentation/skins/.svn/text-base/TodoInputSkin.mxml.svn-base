<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
   	 		 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
             blendMode="normal">
	
    <fx:Metadata>
        [HostComponent("spark.components.TextInput")]
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
    <![CDATA[
    import mx.core.FlexVersion;
    
	//------------------------------------------------------------
	//
	// Properties
	//
	//------------------------------------------------------------	
		
    private var paddingChanged:Boolean;
    
	private static const focusExclusions:Array = ["textDisplay"];
		
    static private const exclusions:Array = ["background", "textDisplay", "promptDisplay"];
    
    static private const exclusions_4_0:Array = ["background", "textDisplay", "promptDisplay"];
    
	static private const contentFill:Array = ["bgFill"];
		
    override public function get colorizeExclusions():Array 
    {
        if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
        {
            return exclusions_4_0;
        }
        
        return exclusions;
    }
    
    override public function get contentItems():Array
	{
		return contentFill
	}
    
    override protected function commitProperties():void
    {
        super.commitProperties();
        
        if (paddingChanged)
        {
            updatePadding();
            paddingChanged = false;
        }
    }
		
	override public function get focusSkinExclusions():Array 
	{
		return focusExclusions;
	}
    
	//------------------------------------------------------------
	//
	// Methods
	//
	//------------------------------------------------------------	
		
    override protected function initializationComplete():void
    {
        useChromeColor = true;
        super.initializationComplete();
    }
    
    override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
    {
        shadow.visible = false;
		
        background.left = background.top = background.right = background.bottom = 0;
        textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
		
        if (promptDisplay)
        {
            promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
            promptDisplay.setLayoutBoundsPosition(0, 0);
        }
       
        super.updateDisplayList(unscaledWidth, unscaledHeight);
    }

    private function updatePadding():void
    {
        if (!textDisplay)
            return;
        
        var padding:Number;
        
        padding = getStyle("paddingLeft");
		
        if (textDisplay.getStyle("paddingLeft") != padding)
            textDisplay.setStyle("paddingLeft", padding);
        
        padding = getStyle("paddingTop");
		
        if (textDisplay.getStyle("paddingTop") != padding)
            textDisplay.setStyle("paddingTop", padding);
        
        padding = getStyle("paddingRight");
		
        if (textDisplay.getStyle("paddingRight") != padding)
            textDisplay.setStyle("paddingRight", padding);
        
        padding = getStyle("paddingBottom");
		
        if (textDisplay.getStyle("paddingBottom") != padding)
            textDisplay.setStyle("paddingBottom", padding);
        
        if (!promptDisplay)
            return;
        
        padding = getStyle("paddingLeft");
		
        if (promptDisplay.getStyle("paddingLeft") != padding)
            promptDisplay.setStyle("paddingLeft", padding);
        
        padding = getStyle("paddingTop");
		
        if (promptDisplay.getStyle("paddingTop") != padding)
            promptDisplay.setStyle("paddingTop", padding);
        
        padding = getStyle("paddingRight");
		
        if (promptDisplay.getStyle("paddingRight") != padding)
            promptDisplay.setStyle("paddingRight", padding);
        
        padding = getStyle("paddingBottom");
		
        if (promptDisplay.getStyle("paddingBottom") != padding)
            promptDisplay.setStyle("paddingBottom", padding);
    }
    
    override public function styleChanged(styleProp:String):void
    {
        var allStyles:Boolean = !styleProp || styleProp == "styleName";

        super.styleChanged(styleProp);
        
        if (allStyles || styleProp.indexOf("padding") == 0)
        {
            paddingChanged = true;
            invalidateProperties();
        }
    }
    ]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>
	
    <s:Rect id="background" left="1" right="1" top="1" bottom="1">
        <s:fill>
            <s:SolidColor id="bgFill" color="0xFFFFFF" />
        </s:fill>
    </s:Rect>
    
    <s:Rect left="1" top="1" right="1" height="1" id="shadow">
        <s:fill>
            <s:SolidColor color="0x000000" alpha="0" />
        </s:fill>
    </s:Rect>
    
    <s:RichEditableText id="textDisplay"
              verticalAlign="middle"
              widthInChars="10"
              left="1" right="1" top="1" bottom="1" />
   
    <s:Label id="promptDisplay"
			 maxDisplayedLines="1"
             verticalAlign="middle"
             mouseEnabled="false" mouseChildren="false"
             includeIn="normalWithPrompt,disabledWithPrompt" 
             includeInLayout="false"/>
	
	<s:Line left="0" right="0" top="0">
		<s:stroke>
			<s:SolidColorStroke color="0xB8B8B8" weight="1"/>
		</s:stroke>
	</s:Line>
	
	<s:Line left="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x7D7D7D" weight="1"/>
		</s:stroke>
	</s:Line>
	
	<s:Line right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x7D7D7D" weight="1"/>
		</s:stroke>
	</s:Line>
	
	<s:Line left="0" right="0" bottom="1">
		<s:stroke>
			<s:SolidColorStroke color="0x7D7D7D" weight="1"/>
		</s:stroke>
	</s:Line>
	
	<s:Line left="0" right="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0xE2E2E2" weight="1"/>
		</s:stroke>
	</s:Line>
	
</s:SparkSkin>